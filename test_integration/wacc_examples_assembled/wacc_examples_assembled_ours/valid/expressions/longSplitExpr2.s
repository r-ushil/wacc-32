.data:
.text:
.global main:
main:
Program { funcs: [], statement: Sequence(Declaration(Int, "x", Expr(BinaryApp(IntLiter(1), Add, BinaryApp(IntLiter(2), Add, BinaryApp(IntLiter(3), Add, BinaryApp(IntLiter(4), Add, BinaryApp(IntLiter(5), Add, BinaryApp(IntLiter(6), Add, BinaryApp(IntLiter(7), Add, BinaryApp(IntLiter(8), Add, BinaryApp(IntLiter(9), Add, BinaryApp(IntLiter(10), Add, BinaryApp(IntLiter(11), Add, BinaryApp(IntLiter(12), Add, BinaryApp(IntLiter(13), Add, BinaryApp(IntLiter(14), Add, BinaryApp(IntLiter(15), Add, BinaryApp(IntLiter(16), Add, IntLiter(17))))))))))))))))))), Sequence(Declaration(Int, "y", Expr(BinaryApp(IntLiter(-1), Sub, BinaryApp(IntLiter(2), Sub, BinaryApp(IntLiter(3), Sub, BinaryApp(IntLiter(4), Sub, BinaryApp(IntLiter(5), Sub, BinaryApp(IntLiter(6), Sub, BinaryApp(IntLiter(7), Sub, BinaryApp(IntLiter(8), Sub, BinaryApp(IntLiter(9), Sub, BinaryApp(IntLiter(10), Sub, BinaryApp(IntLiter(11), Sub, BinaryApp(IntLiter(12), Sub, BinaryApp(IntLiter(13), Sub, BinaryApp(IntLiter(14), Sub, BinaryApp(IntLiter(15), Sub, BinaryApp(IntLiter(16), Sub, IntLiter(17))))))))))))))))))), Sequence(Declaration(Int, "z", Expr(BinaryApp(IntLiter(1), Mul, BinaryApp(IntLiter(2), Mul, BinaryApp(IntLiter(3), Mul, BinaryApp(IntLiter(4), Mul, BinaryApp(IntLiter(5), Mul, BinaryApp(IntLiter(6), Mul, BinaryApp(IntLiter(7), Mul, BinaryApp(IntLiter(8), Mul, BinaryApp(IntLiter(9), Mul, IntLiter(10)))))))))))), Sequence(Declaration(Int, "div", Expr(IntLiter(10))), Sequence(Println(BinaryApp(Ident("x"), Add, BinaryApp(Ident("y"), Add, BinaryApp(Ident("z"), Div, Ident("div"))))), Sequence(Println(BinaryApp(BinaryApp(Ident("x"), Add, BinaryApp(Ident("y"), Add, BinaryApp(Ident("z"), Div, Ident("div")))), Mod, IntLiter(256))), Exit(BinaryApp(Ident("x"), Add, BinaryApp(Ident("y"), Add, BinaryApp(Ident("z"), Div, Ident("div"))))))))))) }.generate(_, 4):
