.data:
.text:
.global main:
main:
Program { funcs: [Func { ident: "createNewNode", signature: FuncSig { params: [(Int, "value"), (Pair(Int, Pair(Any, Any)), "left"), (Pair(Int, Pair(Any, Any)), "right")], return_type: Pair(Int, Pair(Any, Any)) }, body: Sequence(Declaration(Pair(Pair(Any, Any), Pair(Any, Any)), "p", Pair(Ident("left"), Ident("right"))), Sequence(Declaration(Pair(Int, Pair(Any, Any)), "q", Pair(Ident("value"), Ident("p"))), Return(Ident("q")))) }, Func { ident: "insert", signature: FuncSig { params: [(Pair(Int, Pair(Any, Any)), "root"), (Int, "n")], return_type: Pair(Int, Pair(Any, Any)) }, body: Sequence(If(BinaryApp(Ident("root"), Eq, PairLiter), Assignment(Ident("root"), Call("createNewNode", [Ident("n"), PairLiter, PairLiter])), Sequence(Declaration(Pair(Pair(Any, Any), Pair(Any, Any)), "p", PairElem(Snd(Ident("root")))), Sequence(Declaration(Int, "current", PairElem(Fst(Ident("root")))), Sequence(Declaration(Pair(Int, Pair(Any, Any)), "q", Expr(PairLiter)), If(BinaryApp(Ident("n"), Lt, Ident("current")), Sequence(Assignment(Ident("q"), PairElem(Fst(Ident("p")))), Assignment(PairElem(Fst(Ident("p"))), Call("insert", [Ident("q"), Ident("n")]))), Sequence(Assignment(Ident("q"), PairElem(Snd(Ident("p")))), Assignment(PairElem(Snd(Ident("p"))), Call("insert", [Ident("q"), Ident("n")])))))))), Return(Ident("root"))) }, Func { ident: "printTree", signature: FuncSig { params: [(Pair(Int, Pair(Any, Any)), "root")], return_type: Int }, body: If(BinaryApp(Ident("root"), Eq, PairLiter), Return(IntLiter(0)), Sequence(Declaration(Pair(Pair(Any, Any), Pair(Any, Any)), "body", PairElem(Snd(Ident("root")))), Sequence(Declaration(Pair(Int, Pair(Any, Any)), "p", PairElem(Fst(Ident("body")))), Sequence(Declaration(Int, "temp", Call("printTree", [Ident("p")])), Sequence(Assignment(Ident("temp"), PairElem(Fst(Ident("root")))), Sequence(Print(Ident("temp")), Sequence(Print(CharLiter(' ')), Sequence(Assignment(Ident("p"), PairElem(Snd(Ident("body")))), Sequence(Assignment(Ident("temp"), Call("printTree", [Ident("p")])), Return(IntLiter(0))))))))))) }], statement: Sequence(Declaration(Int, "n", Expr(IntLiter(0))), Sequence(Print(StrLiter("Please enter the number of integers to insert: ")), Sequence(Read(Ident("n")), Sequence(Print(StrLiter("There are ")), Sequence(Print(Ident("n")), Sequence(Println(StrLiter(" integers.")), Sequence(Declaration(Int, "i", Expr(IntLiter(0))), Sequence(Declaration(Pair(Int, Pair(Any, Any)), "root", Expr(PairLiter)), Sequence(While(BinaryApp(Ident("i"), Lt, Ident("n")), Sequence(Declaration(Int, "x", Expr(IntLiter(0))), Sequence(Print(StrLiter("Please enter the number at position ")), Sequence(Print(BinaryApp(Ident("i"), Add, IntLiter(1))), Sequence(Print(StrLiter(" : ")), Sequence(Read(Ident("x")), Sequence(Assignment(Ident("root"), Call("insert", [Ident("root"), Ident("x")])), Assignment(Ident("i"), Expr(BinaryApp(Ident("i"), Add, IntLiter(1))))))))))), Sequence(Print(StrLiter("Here are the numbers sorted: ")), Sequence(Assignment(Ident("i"), Call("printTree", [Ident("root")])), Println(StrLiter(""))))))))))))) }.generate(_, 4):
