.data:
.text:
.global main:
main:
Program { funcs: [Func { ident: "init", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table")], return_type: Bool }, body: Sequence(Declaration(Int, "length", Expr(UnaryApp(Len, Ident("table")))), Sequence(Declaration(Int, "i", Expr(IntLiter(0))), Sequence(While(BinaryApp(Ident("i"), Lt, Ident("length")), Sequence(Assignment(ArrayElem(ArrayElem("table", [Ident("i")])), Expr(PairLiter)), Assignment(Ident("i"), Expr(BinaryApp(Ident("i"), Add, IntLiter(1)))))), Return(BoolLiter(true))))) }, Func { ident: "contain", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table"), (Int, "x")], return_type: Bool }, body: Sequence(Declaration(Int, "index", Call("calculateIndex", [Ident("table"), Ident("x")])), Sequence(Declaration(Pair(Int, Pair(Any, Any)), "node", Call("findNode", [ArrayElem(ArrayElem("table", [Ident("index")])), Ident("x")])), Return(BinaryApp(Ident("node"), Neq, PairLiter)))) }, Func { ident: "insertIfNotContain", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table"), (Int, "x")], return_type: Bool }, body: Sequence(Declaration(Int, "index", Call("calculateIndex", [Ident("table"), Ident("x")])), Sequence(Declaration(Pair(Int, Pair(Any, Any)), "node", Call("findNode", [ArrayElem(ArrayElem("table", [Ident("index")])), Ident("x")])), If(BinaryApp(Ident("node"), Neq, PairLiter), Return(BoolLiter(false)), Sequence(Declaration(Pair(Int, Pair(Any, Any)), "p", Pair(Ident("x"), ArrayElem(ArrayElem("table", [Ident("index")])))), Sequence(Assignment(ArrayElem(ArrayElem("table", [Ident("index")])), Expr(Ident("p"))), Return(BoolLiter(true))))))) }, Func { ident: "remove", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table"), (Int, "x")], return_type: Bool }, body: Sequence(Declaration(Int, "index", Call("calculateIndex", [Ident("table"), Ident("x")])), Sequence(Declaration(Pair(Int, Pair(Any, Any)), "node", Call("findNode", [ArrayElem(ArrayElem("table", [Ident("index")])), Ident("x")])), If(BinaryApp(Ident("node"), Eq, PairLiter), Return(BoolLiter(false)), Sequence(Assignment(ArrayElem(ArrayElem("table", [Ident("index")])), Call("removeNode", [ArrayElem(ArrayElem("table", [Ident("index")])), Ident("node")])), Return(BoolLiter(true)))))) }, Func { ident: "removeAll", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table")], return_type: Bool }, body: Sequence(Declaration(Int, "length", Expr(UnaryApp(Len, Ident("table")))), Sequence(Declaration(Int, "i", Expr(IntLiter(0))), Sequence(While(BinaryApp(Ident("i"), Lt, Ident("length")), Sequence(Declaration(Pair(Int, Pair(Any, Any)), "p", Expr(ArrayElem(ArrayElem("table", [Ident("i")])))), Sequence(While(BinaryApp(Ident("p"), Neq, PairLiter), Sequence(Declaration(Pair(Int, Pair(Any, Any)), "p2", PairElem(Snd(Ident("p")))), Sequence(Free(Ident("p")), Assignment(Ident("p"), Expr(Ident("p2")))))), Sequence(Assignment(ArrayElem(ArrayElem("table", [Ident("i")])), Expr(PairLiter)), Assignment(Ident("i"), Expr(BinaryApp(Ident("i"), Add, IntLiter(1)))))))), Return(BoolLiter(true))))) }, Func { ident: "count", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table")], return_type: Int }, body: Sequence(Declaration(Int, "length", Expr(UnaryApp(Len, Ident("table")))), Sequence(Declaration(Int, "sum", Expr(IntLiter(0))), Sequence(Declaration(Int, "i", Expr(IntLiter(0))), Sequence(While(BinaryApp(Ident("i"), Lt, Ident("length")), Sequence(Declaration(Int, "subSum", Call("countNodes", [ArrayElem(ArrayElem("table", [Ident("i")]))])), Sequence(Assignment(Ident("sum"), Expr(BinaryApp(Ident("sum"), Add, Ident("subSum")))), Assignment(Ident("i"), Expr(BinaryApp(Ident("i"), Add, IntLiter(1))))))), Return(Ident("sum")))))) }, Func { ident: "printAll", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table")], return_type: Bool }, body: Sequence(Declaration(Int, "length", Expr(UnaryApp(Len, Ident("table")))), Sequence(Declaration(Int, "i", Expr(IntLiter(0))), Sequence(While(BinaryApp(Ident("i"), Lt, Ident("length")), Sequence(Declaration(Bool, "result", Call("printAllNodes", [ArrayElem(ArrayElem("table", [Ident("i")]))])), Assignment(Ident("i"), Expr(BinaryApp(Ident("i"), Add, IntLiter(1)))))), Sequence(Println(StrLiter("")), Return(BoolLiter(true)))))) }, Func { ident: "calculateIndex", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table"), (Int, "x")], return_type: Int }, body: Sequence(Declaration(Int, "length", Expr(UnaryApp(Len, Ident("table")))), Return(BinaryApp(Ident("x"), Mod, Ident("length")))) }, Func { ident: "findNode", signature: FuncSig { params: [(Pair(Int, Pair(Any, Any)), "head"), (Int, "x")], return_type: Pair(Int, Pair(Any, Any)) }, body: Sequence(While(BinaryApp(Ident("head"), Neq, PairLiter), Sequence(Declaration(Int, "y", PairElem(Fst(Ident("head")))), If(BinaryApp(Ident("y"), Eq, Ident("x")), Return(Ident("head")), Assignment(Ident("head"), PairElem(Snd(Ident("head"))))))), Return(PairLiter)) }, Func { ident: "removeNode", signature: FuncSig { params: [(Pair(Int, Pair(Any, Any)), "head"), (Pair(Int, Pair(Any, Any)), "toRemove")], return_type: Pair(Int, Pair(Any, Any)) }, body: If(BinaryApp(Ident("head"), Eq, PairLiter), Return(PairLiter), If(BinaryApp(Ident("head"), Eq, Ident("toRemove")), Sequence(Assignment(Ident("head"), PairElem(Snd(Ident("head")))), Sequence(Free(Ident("toRemove")), Return(Ident("head")))), Sequence(Declaration(Pair(Int, Pair(Any, Any)), "tail", PairElem(Snd(Ident("head")))), Sequence(Assignment(PairElem(Snd(Ident("head"))), Call("removeNode", [Ident("tail"), Ident("toRemove")])), Return(Ident("head")))))) }, Func { ident: "countNodes", signature: FuncSig { params: [(Pair(Int, Pair(Any, Any)), "head")], return_type: Int }, body: Sequence(Declaration(Int, "sum", Expr(IntLiter(0))), Sequence(While(BinaryApp(Ident("head"), Neq, PairLiter), Sequence(Assignment(Ident("sum"), Expr(BinaryApp(Ident("sum"), Add, IntLiter(1)))), Assignment(Ident("head"), PairElem(Snd(Ident("head")))))), Return(Ident("sum")))) }, Func { ident: "printAllNodes", signature: FuncSig { params: [(Pair(Int, Pair(Any, Any)), "head")], return_type: Bool }, body: Sequence(While(BinaryApp(Ident("head"), Neq, PairLiter), Sequence(Declaration(Int, "x", PairElem(Fst(Ident("head")))), Sequence(Print(Ident("x")), Sequence(Print(CharLiter(' ')), Assignment(Ident("head"), PairElem(Snd(Ident("head")))))))), Return(BoolLiter(true))) }, Func { ident: "printMenu", signature: FuncSig { params: [], return_type: Char }, body: Sequence(Println(StrLiter("===========================================")), Sequence(Println(StrLiter("========== Hash Table Program =============")), Sequence(Println(StrLiter("===========================================")), Sequence(Println(StrLiter("=                                         =")), Sequence(Println(StrLiter("= Please choose the following options:    =")), Sequence(Println(StrLiter("=                                         =")), Sequence(Println(StrLiter("= a: insert an integer                    =")), Sequence(Println(StrLiter("= b: find an integer                      =")), Sequence(Println(StrLiter("= c: count the integers                   =")), Sequence(Println(StrLiter("= d: print all integers                   =")), Sequence(Println(StrLiter("= e: remove an integer                    =")), Sequence(Println(StrLiter("= f: remove all integers                  =")), Sequence(Println(StrLiter("= g: exit                                 =")), Sequence(Println(StrLiter("=                                         =")), Sequence(Println(StrLiter("===========================================")), Sequence(Declaration(Int, "minChoice", Expr(UnaryApp(Ord, CharLiter('a')))), Sequence(Declaration(Int, "maxChoice", Expr(UnaryApp(Ord, CharLiter('g')))), Sequence(While(BoolLiter(true), Sequence(Print(StrLiter("Your decision: ")), Sequence(Declaration(Char, "d", Expr(CharLiter('\u{0}'))), Sequence(Read(Ident("d")), Sequence(Declaration(Int, "dInt", Expr(UnaryApp(Ord, Ident("d")))), If(BinaryApp(BinaryApp(Ident("minChoice"), Lte, Ident("dInt")), And, BinaryApp(Ident("dInt"), Lte, Ident("maxChoice"))), Return(Ident("d")), Sequence(Print(StrLiter("You have entered: ")), Sequence(Print(Ident("d")), Println(StrLiter(" which is invalid, please try again.")))))))))), Return(CharLiter('\u{0}')))))))))))))))))))) }, Func { ident: "askForInt", signature: FuncSig { params: [(String, "message")], return_type: Int }, body: Sequence(Print(Ident("message")), Sequence(Declaration(Int, "x", Expr(IntLiter(0))), Sequence(Read(Ident("x")), Sequence(Print(StrLiter("You have entered: ")), Sequence(Println(Ident("x")), Return(Ident("x"))))))) }, Func { ident: "handleMenuInsert", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table")], return_type: Bool }, body: Sequence(Declaration(Int, "x", Call("askForInt", [StrLiter("Please enter an integer to insert: ")])), Sequence(Declaration(Bool, "notContain", Call("insertIfNotContain", [Ident("table"), Ident("x")])), Sequence(If(Ident("notContain"), Println(StrLiter("Successfully insert it. The integer is new.")), Println(StrLiter("The integer is already there. No insertion is made."))), Return(BoolLiter(true))))) }, Func { ident: "handleMenuFind", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table")], return_type: Bool }, body: Sequence(Declaration(Int, "x", Call("askForInt", [StrLiter("Please enter an integer to find: ")])), Sequence(Declaration(Bool, "find", Call("contain", [Ident("table"), Ident("x")])), Sequence(If(Ident("find"), Println(StrLiter("Find the integer.")), Println(StrLiter("The integer is not found."))), Return(BoolLiter(true))))) }, Func { ident: "handleMenuCount", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table")], return_type: Bool }, body: Sequence(Declaration(Int, "size", Call("count", [Ident("table")])), Sequence(If(BinaryApp(Ident("size"), Eq, IntLiter(1)), Println(StrLiter("There is only 1 integer.")), Sequence(Print(StrLiter("There are ")), Sequence(Print(Ident("size")), Println(StrLiter(" integers."))))), Return(BoolLiter(true)))) }, Func { ident: "handleMenuPrint", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table")], return_type: Bool }, body: Sequence(Print(StrLiter("Here are the integers: ")), Sequence(Declaration(Bool, "junk", Call("printAll", [Ident("table")])), Return(BoolLiter(true)))) }, Func { ident: "handleMenuRemove", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table")], return_type: Bool }, body: Sequence(Declaration(Int, "x", Call("askForInt", [StrLiter("Please enter an integer to remove: ")])), Sequence(Declaration(Bool, "find", Call("remove", [Ident("table"), Ident("x")])), Sequence(If(Ident("find"), Println(StrLiter("The integer has been removed.")), Println(StrLiter("The integer is not found."))), Return(BoolLiter(true))))) }, Func { ident: "handleMenuRemoveAll", signature: FuncSig { params: [(Array(Pair(Int, Pair(Any, Any))), "table")], return_type: Bool }, body: Sequence(Declaration(Bool, "junk", Call("removeAll", [Ident("table")])), Sequence(Println(StrLiter("All integers have been removed.")), Return(BoolLiter(true)))) }], statement: Sequence(Declaration(Array(Pair(Int, Pair(Any, Any))), "table", ArrayLiter(ArrayLiter([PairLiter, PairLiter, PairLiter, PairLiter, PairLiter, PairLiter, PairLiter, PairLiter, PairLiter, PairLiter, PairLiter, PairLiter, PairLiter]))), Sequence(Declaration(Bool, "junk", Call("init", [Ident("table")])), Sequence(Declaration(Bool, "continue", Expr(BoolLiter(true))), While(Ident("continue"), Sequence(Declaration(Char, "choice", Call("printMenu", [])), If(BinaryApp(Ident("choice"), Eq, CharLiter('a')), Declaration(Bool, "result", Call("handleMenuInsert", [Ident("table")])), If(BinaryApp(Ident("choice"), Eq, CharLiter('b')), Declaration(Bool, "result", Call("handleMenuFind", [Ident("table")])), If(BinaryApp(Ident("choice"), Eq, CharLiter('c')), Declaration(Bool, "result", Call("handleMenuCount", [Ident("table")])), If(BinaryApp(Ident("choice"), Eq, CharLiter('d')), Declaration(Bool, "result", Call("handleMenuPrint", [Ident("table")])), If(BinaryApp(Ident("choice"), Eq, CharLiter('e')), Declaration(Bool, "result", Call("handleMenuRemove", [Ident("table")])), If(BinaryApp(Ident("choice"), Eq, CharLiter('f')), Declaration(Bool, "result", Call("handleMenuRemoveAll", [Ident("table")])), If(BinaryApp(Ident("choice"), Eq, CharLiter('g')), Sequence(Println(StrLiter("Goodbye Human")), Assignment(Ident("continue"), Expr(BoolLiter(false)))), Sequence(Print(StrLiter("Error: unknown choice (")), Sequence(Print(Ident("choice")), Sequence(Println(StrLiter(")")), Exit(IntLiter(-1))))))))))))))))) }.generate(_, 4):
